import streamlit as st  
import cx_Oracle
import pandas as pd
import oracledb

def make_clickable(link):
    # Return a string with HTML anchor tag with the link
    return f'<a target="_blank" href="{link}">{link}</a>'


import spacy
from spacy.lang.fr.stop_words import STOP_WORDS as fr_stop

# Charger le modèle français
nlp = spacy.load("fr_core_news_sm")

def filter_keywords_spacy(sentence):
    if is_valid_sentence(sentence):
        # Tokeniser la phrase avec Spacy
        doc = nlp(sentence)
    
        # Filtrer les stop words et les mots non significatifs, sauf pour les exceptions
        keywords = [token.text for token in doc if (token.text.lower() not in fr_stop and token.pos_ in ["ADJ", "NOUN", "VERB", "PROPN"])]

        return ' '.join(keywords)
    else:
        # Retourner la phrase originale si elle ne remplit pas les critères de longueur
        return sentence


def is_valid_sentence(text, word_threshold=3):
    """ Vérifie si le texte ressemble à une phrase valide. """
    words = text.split()
    return len(words) >= word_threshold

oracledb.defaults.fetch_lobs = False


def fetch_search_results(search_term):
    corrected_keyword=filter_keywords_spacy(search_term)

    # Oracle database connection string - modify with your details
    dsn_tns = cx_Oracle.makedsn('localhost', '1521', service_name='xe')
    connection = cx_Oracle.connect(user='sys', password='projet_bda',mode=cx_Oracle.SYSDBA, dsn=dsn_tns)

   
    # Create a cursor
    cursor = connection.cursor()
    cursor.callproc("dbms_output.enable")

    # Call the PL/SQL function to retrieve course names
    cursor.execute("""
    DECLARE
        resultat VARCHAR2(32767);
    BEGIN
        resultat := trouver_lignes_avec_mots_similaires(:keyword);
        DBMS_OUTPUT.PUT_LINE(resultat);
    END;
    """, keyword=corrected_keyword)



       # Liste pour stocker les résultats de DBMS_OUTPUT
    results = []

    # Récupérer et ajouter les lignes de DBMS_OUTPUT à la liste
    statusVar = cursor.var(cx_Oracle.NUMBER)
    lineVar = cursor.var(cx_Oracle.STRING)
    while True:
        cursor.callproc("dbms_output.get_line", (lineVar, statusVar))
        if statusVar.getvalue() != 0:
            break
    
        print('aw')
        results.append(lineVar.getvalue())

    # Traiter les résultats si non vides
    if results[0]:
        # Diviser la première chaîne de caractères en utilisant ';' comme séparateur
        results = results[0].split(';')
        
        # Supprimer les espaces blancs et les chaînes vides de la liste
        results = [item.strip() for item in results if item.strip()]

    print(len(results))
    print(type(results))
    print(results[4])





    # Prepare the SQL query with CLOB to VARCHAR2 conversion
    query = """
        SELECT * FROM SOUSSOUSDomaineFormation 
        WHERE DBMS_LOB.SUBSTR(Le_nom, 4000, 1) IN (:course_names)
    """

    dfs=[]
    for course_name in results :
        # Assuming results[4] is a single course name
        
        
        # Execute thse query
        cursor.execute(query, course_names=course_name)


        # Fetch all rows
        rows = cursor.fetchall()

        # Get column names from the cursor description
        columns = [col[0] for col in cursor.description]
    
        # Create DataFrame from the fetched data
        df = pd.DataFrame(rows, columns=columns)

        dfs.append(df)

    final_df = pd.concat(dfs, ignore_index=True)












    return final_df


def get_database_connection():
    # Replace with your Oracle Database connection details

    dsn_tns = cx_Oracle.makedsn('localhost', '1521', service_name='xe')

    try:
        connection = cx_Oracle.connect(user='sys', password='projet_bda',mode=cx_Oracle.SYSDBA, dsn=dsn_tns)
        return connection
    except cx_Oracle.DatabaseError as e:
        st.error(f"Error connecting to the database: {e}")
        return None


# Set the page configuration for title and favicon
def app (): 
    # Define custom colors and fonts


    primary_color = "#6C5CE7"
    background_color = "#bbbbbb"
    text_color = "#333333"
    font = "Arial"

    # Apply custom CSS styles
    st.markdown(f"""
        <style>
        [data-testid="stAppViewContainer"] > .main {{
            background: linear-gradient(45deg, #f0f0f0, #dddddd);
        }}
            body {{
                background-color: {background_color};
                font-family: {font}, sans-serif;
            }}
            .stTextInput > label, .stButton > button {{
                color: {text_color};
            }}
            .stTextInput > div > div > input {{
                color: {text_color};
                background-color: #f4f4f4; /* Background color for the input */
                border: 2px solid {primary_color};
                border-radius: 30px; /* Add rounded corners to the input */
                padding: 12px 20px; /* Add padding to the input */
                width: 100%; /* Make the input full-width */
                font-size: 18px; /* Adjust font size */
                box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.1); /* Add a subtle box shadow */
            }}
            .stButton > button {{
                border: 2px solid {primary_color};
                color: {background_color};
                background-color: {primary_color};
                border-radius: 30px; /* Add rounded corners to the button */
                padding: 12px 25px; /* Add padding to the button */
                font-size: 18px; /* Adjust font size */
            }}
            .stButton > button:hover {{
                background-color: {text_color};
                border-color: {text_color};
                color: {primary_color};
            }}
        </style>
        """, unsafe_allow_html=True)

    # Title and description at the top
    st.markdown(f'<h1 style="color:{primary_color}; text-align:center;">Digital Courses Hub</h1>', unsafe_allow_html=True)
    st.markdown("""
        LEARN FROM THE BEST ONLINE COURSES!
        
        Welcome to Digital Courses Hub, your gateway to top-quality education. Explore a curated selection of courses from industry-leading platforms such as Udemy, Coursera, and Cegos, and embark on a journey of learning and growth with the best online courses available.
    """)

    #filter_duree = filter_formateurs = filter_notes = None



    connection = get_database_connection()
    if connection:
        search_term = st.text_input("Search for courses", max_chars=50)
        results_df = None
        if st.button("Search"):
            results_df = fetch_search_results(search_term)
            print(results_df)

            st.write(results_df)
           
        else:
            st.write("Enter a search term and click 'Search'.")

        # Close the database connection
            
        
        connection.close()
    else:
        st.error("Failed to connect to the database.")

# Call the app function
if __name__ == "__main__":
    app()